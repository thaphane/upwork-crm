#!/bin/bash

# Check if script is run as root
if [ "$EUID" -ne 0 ]; then
    echo "Please run this script as root (sudo ./configure_network.sh)"
    exit 1
fi

# Function to validate IP address format
validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        for octet in $(echo $ip | tr '.' ' '); do
            if [[ $octet -lt 0 || $octet -gt 255 ]]; then
                return 1
            fi
        done
        return 0
    else
        return 1
    fi
}

# Function to validate netmask format
validate_netmask() {
    local netmask=$1
    if [[ $netmask =~ ^[0-9]{1,2}$ ]]; then
        if [[ $netmask -ge 0 && $netmask -le 32 ]]; then
            return 0
        fi
    fi
    return 1
}

# Function to get network interface names
get_interfaces() {
    ip -o link show | awk -F': ' '{print $2}' | grep -v "lo"
}

# Function to backup existing configuration
backup_config() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    if [ -f "/etc/network/interfaces" ]; then
        cp /etc/network/interfaces "/etc/network/interfaces.backup_$timestamp"
        echo "Backed up interfaces file to /etc/network/interfaces.backup_$timestamp"
    fi
    if [ -f "/etc/resolv.conf" ]; then
        cp /etc/resolv.conf "/etc/resolv.conf.backup_$timestamp"
        echo "Backed up resolv.conf to /etc/resolv.conf.backup_$timestamp"
    fi
}

# Function to configure static IP
configure_static_ip() {
    local interface=$1
    local ip_address=$2
    local netmask=$3
    local gateway=$4

    # Create network interface configuration
    cat > "/etc/network/interfaces.d/$interface" << EOL
auto $interface
iface $interface inet static
    address $ip_address
    netmask $netmask
    gateway $gateway
EOL

    echo "Static IP configuration has been written to /etc/network/interfaces.d/$interface"
}

# Function to configure DHCP
configure_dhcp() {
    local interface=$1

    # Create network interface configuration
    cat > "/etc/network/interfaces.d/$interface" << EOL
auto $interface
iface $interface inet dhcp
EOL

    echo "DHCP configuration has been written to /etc/network/interfaces.d/$interface"
}

# Function to configure DNS
configure_dns() {
    local primary_dns=$1
    local secondary_dns=$2

    # Create resolv.conf configuration
    cat > "/etc/resolv.conf" << EOL
# Generated by network configuration script
nameserver $primary_dns
nameserver $secondary_dns
EOL

    # Make resolv.conf immutable to prevent overwriting
    chattr +i /etc/resolv.conf

    echo "DNS configuration has been written to /etc/resolv.conf"
}

# Function to configure firewall for CRM application
configure_firewall() {
    echo "Configuring firewall for CRM application..."

    # Check if UFW is installed
    if ! command -v ufw &> /dev/null; then
        echo "Installing UFW (Uncomplicated Firewall)..."
        apt-get update
        apt-get install -y ufw || {
            echo "Failed to install UFW"
            return 1
        }
    fi

    # Reset UFW to default settings
    echo "Resetting UFW to default settings..."
    ufw --force reset

    # Set default policies
    ufw default deny incoming
    ufw default allow outgoing

    # Allow SSH (port 22) to prevent lockout
    ufw allow 22/tcp

    # Allow HTTP (port 80) and HTTPS (port 443) if needed
    ufw allow 80/tcp
    ufw allow 443/tcp

    # Allow Frontend port (3000)
    ufw allow 3000/tcp

    # Allow Backend port (5000)
    ufw allow 5000/tcp

    # Allow MongoDB port (27017) only from localhost
    ufw allow from 127.0.0.1 to any port 27017

    # Enable UFW
    echo "Enabling UFW..."
    ufw --force enable

    # Display status
    ufw status verbose

    echo "Firewall configuration complete!"
}

# Main script
echo "Debian Network Configuration Script"
echo "=================================="

# Backup existing configuration
backup_config

# Create interfaces.d directory if it doesn't exist
mkdir -p /etc/network/interfaces.d

# List available interfaces
echo "Available network interfaces:"
interfaces=($(get_interfaces))
for i in "${!interfaces[@]}"; do
    echo "[$i] ${interfaces[$i]}"
done

# Select interface
read -p "Select interface number to configure: " interface_number
if [[ $interface_number -ge 0 && $interface_number -lt ${#interfaces[@]} ]]; then
    selected_interface=${interfaces[$interface_number]}
else
    echo "Invalid interface selection"
    exit 1
fi

# Choose configuration type
echo "Select configuration type:"
echo "[1] Static IP"
echo "[2] DHCP"
read -p "Enter your choice (1 or 2): " config_type

case $config_type in
    1)
        # Static IP configuration
        read -p "Enter IP address (e.g., 192.168.1.100): " ip_address
        if ! validate_ip "$ip_address"; then
            echo "Invalid IP address format"
            exit 1
        fi

        read -p "Enter netmask (e.g., 24 for /24): " netmask
        if ! validate_netmask "$netmask"; then
            echo "Invalid netmask format"
            exit 1
        fi

        read -p "Enter gateway IP (e.g., 192.168.1.1): " gateway
        if ! validate_ip "$gateway"; then
            echo "Invalid gateway IP format"
            exit 1
        fi

        configure_static_ip "$selected_interface" "$ip_address" "$netmask" "$gateway"
        ;;
    2)
        # DHCP configuration
        configure_dhcp "$selected_interface"
        ;;
    *)
        echo "Invalid choice"
        exit 1
        ;;
esac

# DNS Configuration
read -p "Would you like to configure DNS servers? (y/n): " configure_dns_choice
if [[ $configure_dns_choice =~ ^[Yy]$ ]]; then
    read -p "Enter primary DNS server (e.g., 8.8.8.8): " primary_dns
    if ! validate_ip "$primary_dns"; then
        echo "Invalid primary DNS format"
        exit 1
    fi

    read -p "Enter secondary DNS server (e.g., 8.8.4.4): " secondary_dns
    if ! validate_ip "$secondary_dns"; then
        echo "Invalid secondary DNS format"
        exit 1
    fi

    configure_dns "$primary_dns" "$secondary_dns"
fi

# Update main interfaces file
cat > "/etc/network/interfaces" << EOL
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback
EOL

# Configure Firewall
read -p "Would you like to configure the firewall for the CRM application? (y/n): " configure_firewall_choice
if [[ $configure_firewall_choice =~ ^[Yy]$ ]]; then
    configure_firewall
fi

echo "Network configuration complete!"
echo "To apply changes, run: systemctl restart networking"
echo "Or reboot the system: reboot"

# Ask to restart networking
read -p "Would you like to restart networking now? (y/n): " restart_choice
if [[ $restart_choice =~ ^[Yy]$ ]]; then
    systemctl restart networking
    echo "Network service restarted"
    
    # Test network connectivity
    echo "Testing network connectivity..."
    if ping -c 3 8.8.8.8 &> /dev/null; then
        echo "Network is working properly"
    else
        echo "Warning: Network connectivity test failed"
        echo "Please check your configuration and restart networking manually"
    fi
fi 